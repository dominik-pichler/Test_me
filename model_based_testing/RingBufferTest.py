import pytest
from hypothesis import given, strategies as st
from hypothesis.stateful import RuleBasedStateMachine, rule, precondition, invariant, initialize
from RingBufferModel import RingBuffer  # Assuming RingBuffer is correctly implemented


class RingBufferModel(RuleBasedStateMachine):
    CAPACITY = 3

    def __init__(self):
        super().__init__()
        self.ring_buffer = None
        self.size = 0

    @initialize()
    def init(self):
        self.ring_buffer = RingBuffer(self.CAPACITY)
        self.size = 0

    @precondition(lambda self: self.size != 0)
    @rule()
    def reset(self):
        self.ring_buffer.reset()
        self.size = 0

    @precondition(lambda self: self.size < self.CAPACITY)
    @rule()
    def enqueue(self):
        self.ring_buffer.enqueue(f"test {self.size}")
        self.size += 1

    @precondition(lambda self: self.size > 0)
    @rule()
    def dequeue(self):
        self.ring_buffer.dequeue()
        self.size -= 1

    @precondition(lambda self: self.size > 0)
    @rule()
    def peek(self):
        result = self.ring_buffer.peek()
        assert result is not None
        return result

    @invariant()
    def buffer_size_invariant(self):
        assert 0 <= self.size <= self.CAPACITY

    @invariant()
    def buffer_content_invariant(self):
        if self.size > 0:
            assert self.ring_buffer.peek() is not None


@given(st.integers())
def test_ring_buffer_model(value):
    # The test function only needs to instantiate the model
    model = RingBufferModel()

    # Hypothesis manages the execution of the state machine
    # No need for model.run() or similar method here
    # Use `value` generated by st.integers() if needed

if __name__ == "__main__":
    pytest.main()
